// <auto-generated />
using CooperativeAccounting.Models.DataBaseConnections;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CooperativeAccounting.Migrations
{
    [DbContext(typeof(CooperativeAccountingDataContext))]
    [Migration("20180511005650_Migrate3")]
    partial class Migrate3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.AppUser", b =>
                {
                    b.Property<long>("AppUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BackgroundPicture");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<long?>("LastModifiedBy");

                    b.Property<int>("LgaId");

                    b.Property<string>("MaritalStatus")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .HasMaxLength(100);

                    b.Property<string>("MobileExtension");

                    b.Property<double>("MonthlyContribution");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Nationality")
                        .IsRequired();

                    b.Property<string>("NextOfKin")
                        .IsRequired();

                    b.Property<string>("NextOfKinAddress")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("ProfilePicture");

                    b.Property<long?>("RoleId")
                        .IsRequired();

                    b.Property<string>("Spouce");

                    b.Property<int>("StateId");

                    b.Property<string>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("AppUserId");

                    b.HasIndex("LgaId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Bank", b =>
                {
                    b.Property<long>("BankId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Lga", b =>
                {
                    b.Property<int>("LgaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("StateId");

                    b.HasKey("LgaId");

                    b.ToTable("Lgas");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Loan", b =>
                {
                    b.Property<long>("LoanId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName")
                        .IsRequired();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<double>("Amount");

                    b.Property<long>("AppUserId");

                    b.Property<long?>("BankId")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<int>("Duration");

                    b.Property<bool>("Emergency");

                    b.Property<string>("FirstGuarantorMobile")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FirstGuarantorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("LastModifiedBy");

                    b.Property<string>("Purpose");

                    b.Property<string>("SecondGuarantorMobile")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SecondGuarantorName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TransactionDate")
                        .IsRequired();

                    b.Property<long?>("TransactionId");

                    b.Property<long?>("TransactionTypeId");

                    b.HasKey("LoanId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BankId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Minute", b =>
                {
                    b.Property<long>("MinuteId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<long?>("LastModifiedBy");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("MinuteId");

                    b.ToTable("Minutes");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<long?>("LastModifiedBy");

                    b.Property<bool>("ManageAllTransaction");

                    b.Property<bool>("ManageMemberRoles");

                    b.Property<bool>("ManageMemberTransaction");

                    b.Property<bool>("ManageMembers");

                    b.Property<bool>("ManageTransactionType");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<double>("Amount");

                    b.Property<long>("AppUserId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<long?>("LastModifiedBy");

                    b.Property<DateTime?>("TransactionDate")
                        .IsRequired();

                    b.Property<string>("TransactionName")
                        .IsRequired();

                    b.Property<long>("TransactionTypeId");

                    b.Property<string>("VoucherNumber");

                    b.HasKey("TransactionId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.TransactionType", b =>
                {
                    b.Property<long>("TransactionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Asset");

                    b.Property<bool>("Cash");

                    b.Property<long?>("CreatedBy");

                    b.Property<bool>("Credit");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateLastModified");

                    b.Property<bool>("Debit");

                    b.Property<bool>("Equity");

                    b.Property<long?>("LastModifiedBy");

                    b.Property<bool>("Liability");

                    b.Property<bool>("Loan");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("Urgent");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.AppUser", b =>
                {
                    b.HasOne("CooperativeAccounting.Models.Entities.Lga", "Lga")
                        .WithMany()
                        .HasForeignKey("LgaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CooperativeAccounting.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CooperativeAccounting.Models.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Loan", b =>
                {
                    b.HasOne("CooperativeAccounting.Models.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CooperativeAccounting.Models.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CooperativeAccounting.Models.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.HasOne("CooperativeAccounting.Models.Entities.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId");
                });

            modelBuilder.Entity("CooperativeAccounting.Models.Entities.Transaction", b =>
                {
                    b.HasOne("CooperativeAccounting.Models.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CooperativeAccounting.Models.Entities.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
